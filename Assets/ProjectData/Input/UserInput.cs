//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/ProjectData/Input/UserInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @UserInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @UserInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""UserInput"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""956bfb67-cebd-4f88-90ff-d39db57a6fec"",
            ""actions"": [
                {
                    ""name"": ""A_Button"",
                    ""type"": ""Button"",
                    ""id"": ""fcec75da-3c2d-43ef-86a4-83e683c3dd2c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""D_Button"",
                    ""type"": ""Button"",
                    ""id"": ""5c0b8534-8d57-4698-9307-c4aaa5417734"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""W_Button"",
                    ""type"": ""Button"",
                    ""id"": ""ab747c3e-2916-4165-9f59-7144886c0eb2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""S_Button"",
                    ""type"": ""Button"",
                    ""id"": ""ce4dbe83-2b5b-40d9-b68e-01878b01da74"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mouse_L"",
                    ""type"": ""Button"",
                    ""id"": ""34a4a991-fa08-461b-a0d2-5edd53de4b19"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mouse_R"",
                    ""type"": ""Button"",
                    ""id"": ""793a68b5-6ef5-4f1b-93e4-fa7607936c40"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""251c6c4b-1937-4635-8e45-b000692a2138"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AnyKey"",
                    ""type"": ""Button"",
                    ""id"": ""d19c85a7-9017-46c0-9788-06795f1903f0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0063f5f4-f6db-4b17-b990-5718680d995c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard and Mouse"",
                    ""action"": ""A_Button"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""242ea0b8-c1d0-4287-982d-37a0c24ff863"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard and Mouse"",
                    ""action"": ""D_Button"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""95978662-feb0-4478-b4b2-3959022087ad"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard and Mouse"",
                    ""action"": ""Mouse_L"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bd94e1c3-5e25-46e5-a012-dda649713c8f"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard and Mouse"",
                    ""action"": ""Mouse_R"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d28ef1d-bfde-4a9f-8c46-bee6c91d3294"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard and Mouse"",
                    ""action"": ""W_Button"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""203ff59a-51d4-45bd-b385-894b5807da24"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard and Mouse"",
                    ""action"": ""S_Button"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1225f24e-5c34-40eb-b421-fff4a1f131fe"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard and Mouse"",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f6af2e4e-d35e-4cfe-9865-04d5c8771d0d"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard and Mouse"",
                    ""action"": ""AnyKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyBoard and Mouse"",
            ""bindingGroup"": ""KeyBoard and Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_A_Button = m_Player.FindAction("A_Button", throwIfNotFound: true);
        m_Player_D_Button = m_Player.FindAction("D_Button", throwIfNotFound: true);
        m_Player_W_Button = m_Player.FindAction("W_Button", throwIfNotFound: true);
        m_Player_S_Button = m_Player.FindAction("S_Button", throwIfNotFound: true);
        m_Player_Mouse_L = m_Player.FindAction("Mouse_L", throwIfNotFound: true);
        m_Player_Mouse_R = m_Player.FindAction("Mouse_R", throwIfNotFound: true);
        m_Player_Escape = m_Player.FindAction("Escape", throwIfNotFound: true);
        m_Player_AnyKey = m_Player.FindAction("AnyKey", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_A_Button;
    private readonly InputAction m_Player_D_Button;
    private readonly InputAction m_Player_W_Button;
    private readonly InputAction m_Player_S_Button;
    private readonly InputAction m_Player_Mouse_L;
    private readonly InputAction m_Player_Mouse_R;
    private readonly InputAction m_Player_Escape;
    private readonly InputAction m_Player_AnyKey;
    public struct PlayerActions
    {
        private @UserInput m_Wrapper;
        public PlayerActions(@UserInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @A_Button => m_Wrapper.m_Player_A_Button;
        public InputAction @D_Button => m_Wrapper.m_Player_D_Button;
        public InputAction @W_Button => m_Wrapper.m_Player_W_Button;
        public InputAction @S_Button => m_Wrapper.m_Player_S_Button;
        public InputAction @Mouse_L => m_Wrapper.m_Player_Mouse_L;
        public InputAction @Mouse_R => m_Wrapper.m_Player_Mouse_R;
        public InputAction @Escape => m_Wrapper.m_Player_Escape;
        public InputAction @AnyKey => m_Wrapper.m_Player_AnyKey;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @A_Button.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnA_Button;
                @A_Button.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnA_Button;
                @A_Button.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnA_Button;
                @D_Button.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnD_Button;
                @D_Button.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnD_Button;
                @D_Button.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnD_Button;
                @W_Button.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnW_Button;
                @W_Button.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnW_Button;
                @W_Button.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnW_Button;
                @S_Button.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnS_Button;
                @S_Button.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnS_Button;
                @S_Button.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnS_Button;
                @Mouse_L.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMouse_L;
                @Mouse_L.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMouse_L;
                @Mouse_L.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMouse_L;
                @Mouse_R.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMouse_R;
                @Mouse_R.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMouse_R;
                @Mouse_R.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMouse_R;
                @Escape.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnEscape;
                @Escape.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnEscape;
                @Escape.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnEscape;
                @AnyKey.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAnyKey;
                @AnyKey.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAnyKey;
                @AnyKey.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAnyKey;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @A_Button.started += instance.OnA_Button;
                @A_Button.performed += instance.OnA_Button;
                @A_Button.canceled += instance.OnA_Button;
                @D_Button.started += instance.OnD_Button;
                @D_Button.performed += instance.OnD_Button;
                @D_Button.canceled += instance.OnD_Button;
                @W_Button.started += instance.OnW_Button;
                @W_Button.performed += instance.OnW_Button;
                @W_Button.canceled += instance.OnW_Button;
                @S_Button.started += instance.OnS_Button;
                @S_Button.performed += instance.OnS_Button;
                @S_Button.canceled += instance.OnS_Button;
                @Mouse_L.started += instance.OnMouse_L;
                @Mouse_L.performed += instance.OnMouse_L;
                @Mouse_L.canceled += instance.OnMouse_L;
                @Mouse_R.started += instance.OnMouse_R;
                @Mouse_R.performed += instance.OnMouse_R;
                @Mouse_R.canceled += instance.OnMouse_R;
                @Escape.started += instance.OnEscape;
                @Escape.performed += instance.OnEscape;
                @Escape.canceled += instance.OnEscape;
                @AnyKey.started += instance.OnAnyKey;
                @AnyKey.performed += instance.OnAnyKey;
                @AnyKey.canceled += instance.OnAnyKey;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    private int m_KeyBoardandMouseSchemeIndex = -1;
    public InputControlScheme KeyBoardandMouseScheme
    {
        get
        {
            if (m_KeyBoardandMouseSchemeIndex == -1) m_KeyBoardandMouseSchemeIndex = asset.FindControlSchemeIndex("KeyBoard and Mouse");
            return asset.controlSchemes[m_KeyBoardandMouseSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnA_Button(InputAction.CallbackContext context);
        void OnD_Button(InputAction.CallbackContext context);
        void OnW_Button(InputAction.CallbackContext context);
        void OnS_Button(InputAction.CallbackContext context);
        void OnMouse_L(InputAction.CallbackContext context);
        void OnMouse_R(InputAction.CallbackContext context);
        void OnEscape(InputAction.CallbackContext context);
        void OnAnyKey(InputAction.CallbackContext context);
    }
}
